//Dijkstra+DFS算法
#include<cstdio>
#include<cstring>
#include<vector>
#include<algorithm>
using namespace std;
const int MAXV = 510;
const int INF = 1000000000;

int n, m, st, ed, G[MAXV][MAXV], cost[MAXV][MAXV];//顶点数，边数，起点，终点，距离矩阵，花费矩阵 
int d[MAXV], minCost = INF; //最短距离，最小花费，最短路径前驱结点 
bool vis[MAXV] = {false};
vector<int> pre[MAXV];
vector<int> tempPath, path;		//临时路径，最优路径 

void Dijkstra(int s) {
	fill(d, d + MAXV, INF);
	d[s] = 0;				 //注意以上都是对定义数组的初始化
	for(int i = 0; i < n; i++) { 	//n个点都要访问一遍 
		int u = -1, MIN = INF; 		 //u使d[u]最小，MIN存放该最小d[u] 
		for(int j = 0; j < n; j++) {		//找出未访问的顶点中d[]最小的 
			if(vis[j] == false && d[j] < MIN) {
				u = j;
				MIN = d[j];
			}
		} 
		if(u == -1) return;
		vis[u] = true;
		for(int v = 0; v< n; v++) {
			if(vis[v] == false && G[u][v] != INF){    //u能到达v且v未被访问 
				if(d[u] + G[u][v] < d[v]) {           //如果以u为中介点能使d[v]更优 
					d[v] = d[u] + G[u][v];            //覆盖d[v]换成经过u的路径 
					pre[v].clear();
					pre[v] .push_back(u);           			   //令v的前驱是u 
				}else if(d[u] + G[u][v] == d[v]) {   //如果以u为中介点最短路径不变 
					pre[v].push_back(u);
				}
			}
		}
	} 
} 

void DFS(int v)   {				//v为当前结点 
	if(v == st) {				//递归边界，到达叶子结点 
		tempPath.push_back(v);
		int tempCost = 0;
		for(int i = tempPath.size() - 1; i>0; i--) {
			int id = tempPath[i], idNext = tempPath[i - 1];
			tempCost += cost[id][idNext];
		} 
		if(tempCost < minCost) {
			minCost = tempCost;
			path = tempPath;
		}
		tempPath.pop_back();
		return;
	} 
	tempPath.push_back(v);
	for(int i = 0; i < pre[v].size(); i++) {
		DFS(pre[v][i]);
	}
	tempPath.pop_back();
} 

int main() {
	scanf("%d%d%d%d", &n, &m, &st, &ed);
	int u, v;
	fill(G[0], G[0] + MAXV * MAXV, INF);
	fill(cost[0], cost[0] + MAXV * MAXV, INF);
	for(int i = 0; i < m; i++) {
		scanf("%d%d", &u, &v);
		scanf("%d%d", &G[u][v], &cost[u][v]);
		G[v][u]= G[u][v];
		cost[v][u]= cost[u][v];
	}
	Dijkstra(st);
	DFS(ed);           		//获取最优路径 
	for(int i = path.size() - 1; i >= 0;i--) {
		printf("%d ", path[i]);
	} 
	printf("%d %d\n", d[ed], minCost);
	return 0 ;
} 
