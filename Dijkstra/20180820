#include<cstdio>
#include<algorithm>
using namespace std;
const int MAXV= 1000;
const int INF = 1000000000;
int n, m, s, G[MAXV][MAXV]; //顶点数，边数，起点，图 
int d[MAXV]; //起点到终点最短路径长度 
bool vis[MAXV] = {false};

void Dijkstra(int s) {
	fill(d, d + MAXV, INF);
	d[s] = 0;
	for(int i = 0; i < n; i++) {
		int u = -1, MIN = INF;
		for(int j = 0; j < n; j++) {
			if(vis[j] = false && d[j] < MIN) {
				u = j;
				MIN = d[j]; //选出最小距离点 
			}
		}
		if(u == -1) return; //未找到小于INF的点，说明剩下的顶点和起点s都不连通
		vis[u] = true; //找到这点，标记为已访问 
		for(int v = 0; v < n; v++) {
			if(vis[v] == false && G[u][v] != INF && d[u] + G[u][v] < d[v]) {
				d[v] = d[u] + G[u][v];
			}
		} 
	}
}

int main() {
	int u, v, w;
	scanf("%d%d%d", &n, &m, &s);
	fill(G[0], G[0] + MAXV*MAXV, INF);
	for(int i = 0; i < m; i++) {
		scanf("%d%d%d", &u, &v, &w);
		G[u][v] = w;
	} 
	Dijkstra(s);
	for(int i =0; i < n; i++) {
		printf("%d ", d[i]);//输出所有顶点的最短距离 
	}
	return 0;
}
