#include<cstdio>
const int maxn = 110;
int father[maxn];
bool isRoot[maxn];

int findFather(int x) { //查找根节点 
	int a = x;
	while(x != father[x]) {
		x = father[x];
	}
	while(a != father[a]) { //路径压缩，可不写 
		int z = a;
		a = fahter[a];
		father[z] = x;
	}
	return x;
}
 
void Union(int a, int b) { //合并集合 
	int faA = findFather(a);
	int faB = findFather(b);
	if(faA != faB) {
		father[faB]	 = faA ;
	}
}

void init(int n) { //初始化 
	for(int i = 0; i < n; i++) {
		father[i] = i;
		isRoot[i] = false;
	}
}

int main() {
	int n , m,a, b;
	scanf("%d%d",&n, &m);
	init(n);
	for(int i =0; i<m; i++) {
		scanf("%d%d", &a, &b) ;
		Union (a,b);
	}
	for(int i = 1; i <= n; i++) {
		isRoot[findFather[i]] = true;
		
	}
	int ans = 0;
	for(int i = 1; i <= n; i++){
		ans += ifRoot[i];
	}
	printf("%d\n", ans);
	
	return 0;
}
 
