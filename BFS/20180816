#include<cstdio>
#include<cstring>
#include<queue>
using namespace std;

const int maxn = 100;
struct node{
	int x, y;
	int step;
}S,T,Node; //定义开始结点，终止结点，任意结点，用于queue; 

int n, m; // 行与列； 
char matrix[maxn][maxn];// 迷宫信息
bool inq[maxn][maxn] = { false }; //位置(x,y)是否入队
int X[4] = { 0, 0, 1, -1 }; //增量数组，用于以后遍历相邻结点
int Y[4] = { 1, -1, 0, 0 };



//判断位置是否有效
bool judge(int x, int y) {
	if (x < 0 || y < 0 || x >= n || y >= m) {//超过边界
		return false;
	}
	if (inq[x][y] == true ) {//入过队，或是墙壁
		return false;
	}
	if( matrix[x][y] == '*'){
		return false;
	}
	return true;
}

int BFS() {
	queue<node> Q; //定义一个队列用于BFS，数据类型是Node； 
	Q.push(S);
	while (!Q.empty()) {
		node top = Q.front();
		Q.pop();
		if (top.x == T.x && top.y == T.y) {
			return top.step;
		}
		for (int i = 0; i < 4; i++) {
			int newX = top.x + X[i];
			int newY = top.y + Y[i];
			if (judge(newX, newY)) {
				Node.x = newX, Node.y = newY;
				Node.step = top.step + 1;
				Q.push(Node);
				inq[newX][newY] = true;
			}
		}
	}
	return -1;
}

int main() {
	scanf("%d%d", &n, &m);
	for (int i = 0; i < n; i++) {
		getchar(); //过滤掉每行换行符；
		for (int j = 0; j < m; j++) {
			matrix[i][j] = getchar();
		}
		matrix[i][m + 1] = '\0'; //每行末尾有换行符
	}
	scanf("%d%d%d", &S.x, &S.y, &T.x, &T.y);
	S.step = 0;
	printf("%d", BFS());
	return 0;
}
