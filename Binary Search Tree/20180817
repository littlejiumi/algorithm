#include<cstdio>
#include<vector>
using namespace std;
struct node{
	int data;
	node *childL, *childR;
};

void insert(node* &root, int data) {
	if(root = NULL) {
		root = new node;
		root->data = data;
		root->childL = root->childR = NULL;
		return;
	}
	if(root->data > data) {
		insert(root->childL, data);
	}
	else {
		insert(root->childR, data);
	}
}

void preOrder(node* root, vector<int>&vi) {
	if(root == NULL) {
		return;
	}
	vi.push_back(root->data);
	preOrder(root->childL, vi);
	preOrder(root->childR, vi); 
}

void preOrderMirror(node* root, vector<int>&vi) {
	if(root == NULL) {
		return;
	}
	vi.push_back(root->data);
	preOrderMirror(root->childR, vi); 
	preOrderMirror(root->childL, vi);
}

void postOrder(node* root, vector<int>&vi) {
	if(root == NULL) {
		return;
	}
	postOrder(root->childL, vi);
	postOrder(root->childR, vi); 
	vi.push_back(root->data);	
}

void postOrderMirror(node* root, vector<int>&vi) {
	if(root == NULL) {
		return;
	}
	postOrderMirror(root->childR, vi); 	
	postOrderMirror(root->childL, vi);	
	vi.push_back(root->data);
}

vector<int> origin, pre, preM, post, postM;
int main(){
	int n, data;
	node* root = NULL;
	scanf("%d", &n);
	for(int i = 0; i < n; i++) {
		scanf("%d", &data);
		origin.push_back(data);
		insert(root, data);
	}
	preOrder(root, pre);
	preOrderMirror(root, preM);
	postOrder(root, post);
	postOrder(root, postM);
	if(origin == pre) {
		printf("YES\n");
		for(int i = 0; i< post.size();i++) {
		printf("%d", post[i]);
		if(i < post.size() - 1) printf(" ");
		}	
	}else if (origin == preM) {
		printf("YES\n");
		for(int i = 0; i< postM.size();i++) {
		printf("%d", postM[i]);
		if(i < postM.size() - 1) printf(" ");
		}	
	}else {
		printf("NO\n");
	}
	return 0;
}

